{"version":3,"file":"62f37cd1.js","sources":["../../../node_modules/@shopify/hydrogen/dist/esnext/utilities/log/log.js","../../../node_modules/@shopify/hydrogen/dist/esnext/foundation/ServerRequestProvider/ServerRequestProvider.js","../../../node_modules/@shopify/hydrogen/dist/esnext/foundation/Analytics/const.js","../../../node_modules/@shopify/hydrogen/dist/esnext/foundation/Analytics/utils.js"],"sourcesContent":["import { yellow, red, green, italic, lightBlue } from 'kolorist';\nimport { getTime } from '../timing';\nimport { parseUrl } from './utils';\nconst defaultLogger = {\n    trace(context, ...args) {\n        // Re-enable following line to show trace debugging information\n        // console.log(context.id, ...args);\n    },\n    debug(context, ...args) {\n        console.log(...args);\n    },\n    warn(context, ...args) {\n        console.warn(yellow('WARN: '), ...args);\n    },\n    error(context, ...args) {\n        console.error(red('ERROR: '), ...args);\n    },\n    fatal(context, ...args) {\n        console.error(red('FATAL: '), ...args);\n    },\n    options: () => ({}),\n};\nglobalThis.__logger = defaultLogger;\nfunction buildLogger() {\n    return {\n        trace: (...args) => globalThis.__logger.trace(this, ...args),\n        debug: (...args) => globalThis.__logger.debug(this, ...args),\n        warn: (...args) => globalThis.__logger.warn(this, ...args),\n        error: (...args) => globalThis.__logger.error(this, ...args),\n        fatal: (...args) => globalThis.__logger.fatal(this, ...args),\n        options: () => globalThis.__logger.options(),\n    };\n}\nexport const log = buildLogger.call({});\nexport function getLoggerWithContext(context = {}) {\n    return buildLogger.call(context);\n}\nexport function setLogger(newLogger) {\n    globalThis.__logger = newLogger;\n}\nexport function setLoggerOptions(options) {\n    globalThis.__logger.options = () => options;\n}\nexport function resetLogger() {\n    globalThis.__logger = defaultLogger;\n}\nconst SERVER_RESPONSE_MAP = {\n    str: 'streaming SSR',\n    rsc: 'Server Components',\n    ssr: 'buffered SSR',\n};\nexport function logServerResponse(type, request, responseStatus) {\n    const log = getLoggerWithContext(request);\n    const coloredResponseStatus = responseStatus >= 500\n        ? red(responseStatus)\n        : responseStatus >= 400\n            ? yellow(responseStatus)\n            : responseStatus >= 300\n                ? lightBlue(responseStatus)\n                : green(responseStatus);\n    const fullType = SERVER_RESPONSE_MAP[type] || type;\n    const styledType = italic(fullType.padEnd(17));\n    const paddedTiming = ((getTime() - request.time).toFixed(2) + ' ms').padEnd(10);\n    const url = parseUrl(type, request.url);\n    log.debug(`${request.method} ${styledType} ${coloredResponseStatus} ${paddedTiming} ${url}`);\n}\n","import React, { createContext, useContext } from 'react';\nimport { getTime } from '../../utilities/timing';\nimport { hashKey } from '../../utilities/hash';\nimport { collectQueryTimings } from '../../utilities/log';\n// Context to inject current request in SSR\nconst RequestContextSSR = createContext(null);\n// Cache to inject current request in RSC\nfunction requestCacheRSC() {\n    return new Map();\n}\nrequestCacheRSC.key = Symbol.for('HYDROGEN_REQUEST');\nexport function ServerRequestProvider({ isRSC, request, children, }) {\n    if (isRSC) {\n        // Save the request object in a React cache that is\n        // scoped to this current rendering.\n        // @ts-ignore\n        const requestCache = React.unstable_getCacheForType(requestCacheRSC);\n        requestCache.set(requestCacheRSC.key, request);\n        return children;\n    }\n    // Use a normal provider in SSR to make the request object\n    // available in the current rendering.\n    return (React.createElement(RequestContextSSR.Provider, { value: request }, children));\n}\nexport function useServerRequest() {\n    let request;\n    try {\n        // This cache only works during RSC rendering:\n        // @ts-ignore\n        const cache = React.unstable_getCacheForType(requestCacheRSC);\n        request = cache ? cache.get(requestCacheRSC.key) : null;\n    }\n    catch (_a) {\n        // If RSC cache failed it means this is not an RSC request.\n        // Try getting SSR context instead:\n        request = useContext(RequestContextSSR); // eslint-disable-line react-hooks/rules-of-hooks\n    }\n    if (!request) {\n        // @ts-ignore\n        if (__DEV__ && typeof jest !== 'undefined') {\n            // Unit tests are not wrapped in ServerRequestProvider.\n            // This mocks it, instead of providing it in every test.\n            return { ctx: {} };\n        }\n        throw new Error('No ServerRequest Context found');\n    }\n    return request;\n}\n/**\n * Returns data stored in the request cache.\n * It will throw the promise if data is not ready.\n */\nexport function useRequestCacheData(key, fetcher) {\n    const request = useServerRequest();\n    const cache = request.ctx.cache;\n    const cacheKey = hashKey(key);\n    if (!cache.has(cacheKey)) {\n        let result;\n        let promise;\n        cache.set(cacheKey, () => {\n            if (result !== undefined) {\n                collectQueryTimings(request, key, 'rendered');\n                return result;\n            }\n            if (!promise) {\n                const startApiTime = getTime();\n                const maybePromise = fetcher();\n                if (!(maybePromise instanceof Promise)) {\n                    result = { data: maybePromise };\n                    return result;\n                }\n                promise = maybePromise.then((data) => {\n                    result = { data };\n                    collectQueryTimings(request, key, 'resolved', getTime() - startApiTime);\n                }, (error) => (result = { error }));\n            }\n            throw promise;\n        });\n    }\n    // Making sure the promise has returned data because it can be initated by a preload request,\n    // otherwise, we throw the promise\n    const result = cache.get(cacheKey).call();\n    if (result instanceof Promise)\n        throw result;\n    return result;\n}\nexport function preloadRequestCacheData(request, preloadQueries) {\n    const cache = request.ctx.cache;\n    preloadQueries === null || preloadQueries === void 0 ? void 0 : preloadQueries.forEach((preloadQuery, cacheKey) => {\n        collectQueryTimings(request, preloadQuery.key, 'preload');\n        if (!cache.has(cacheKey)) {\n            let result;\n            let promise;\n            cache.set(cacheKey, () => {\n                if (result !== undefined) {\n                    collectQueryTimings(request, preloadQuery.key, 'rendered');\n                    return result;\n                }\n                if (!promise) {\n                    const startApiTime = getTime();\n                    promise = preloadQuery.fetcher().then((data) => {\n                        result = { data };\n                        collectQueryTimings(request, preloadQuery.key, 'resolved', getTime() - startApiTime);\n                    }, (error) => {\n                        result = { error };\n                    });\n                }\n                return promise;\n            });\n        }\n        cache.get(cacheKey).call();\n    });\n}\n","export const eventNames = {\n    PAGE_VIEW: 'page-view',\n    VIEWED_PRODUCT: 'viewed-product',\n    ADD_TO_CART: 'add-to-cart',\n    REMOVE_FROM_CART: 'remove-from-cart',\n    UPDATE_CART: 'update-cart',\n    DISCOUNT_CODE_UPDATED: 'discount-code-updated',\n    PERFORMANCE: 'performance',\n};\n","import { eventNames } from './const';\nconst RESERVED_EVENT_NAMES = Object.values(eventNames);\nexport function getNamedspacedEventname(eventname) {\n    // Any event name that is not in the reserved space will be prefix with `c-`\n    return RESERVED_EVENT_NAMES.indexOf(eventname) === -1\n        ? `c-${eventname}`\n        : eventname;\n}\n"],"names":["createContext"],"mappings":"4EAGA,KAAM,GAAgB,CAClB,MAAM,KAAY,EAAM,CAGvB,EACD,MAAM,KAAY,EAAM,CACpB,QAAQ,IAAI,GAAG,CAAI,CACtB,EACD,KAAK,KAAY,EAAM,CACnB,QAAQ,KAAK,EAAO,QAAQ,EAAG,GAAG,CAAI,CACzC,EACD,MAAM,KAAY,EAAM,CACpB,QAAQ,MAAM,EAAI,SAAS,EAAG,GAAG,CAAI,CACxC,EACD,MAAM,KAAY,EAAM,CACpB,QAAQ,MAAM,EAAI,SAAS,EAAG,GAAG,CAAI,CACxC,EACD,QAAS,IAAO,EAAA,EACpB,EACA,WAAW,SAAW,EACtB,YAAuB,CACnB,MAAO,CACH,MAAO,IAAI,IAAS,WAAW,SAAS,MAAM,KAAM,GAAG,CAAI,EAC3D,MAAO,IAAI,IAAS,WAAW,SAAS,MAAM,KAAM,GAAG,CAAI,EAC3D,KAAM,IAAI,IAAS,WAAW,SAAS,KAAK,KAAM,GAAG,CAAI,EACzD,MAAO,IAAI,IAAS,WAAW,SAAS,MAAM,KAAM,GAAG,CAAI,EAC3D,MAAO,IAAI,IAAS,WAAW,SAAS,MAAM,KAAM,GAAG,CAAI,EAC3D,QAAS,IAAM,WAAW,SAAS,QAAS,CACpD,CACA,CACmB,EAAY,KAAK,CAAE,CAAA,EC5BZA,EAAa,QAAA,cAAC,IAAD,ECL3B,KAAC,GAAa,CACtB,UAAW,YACX,eAAgB,iBAChB,YAAa,cACb,iBAAkB,mBAClB,YAAa,cACb,sBAAuB,wBACvB,YAAa,aACjB,ECPM,EAAuB,OAAO,OAAO,CAAU,EAC9C,WAAiC,EAAW,CAE/C,MAAO,GAAqB,QAAQ,CAAS,IAAM,GAC7C,KAAK,IACL,CACV"}